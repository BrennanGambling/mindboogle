#!/usr/bin/env python
"""
This nipype (python) script runs a complete brain image morphology pipeline::

    1. FreeSurfer's recon-all (12hrs on macOS 10.12, 2.6GHz, 16GB RAM)
    2. ANTs's antsCorticalThickness.sh (5.8hrs)
    3. Mindboggle (http://mindboggle.info) (1.8hrs)

mindboggle123 is intended to be run within the Mindboggle Docker container.
Don't use this script if you wish to use different arguments than those below.
Instead call the commands individually (see README).

Example (we set environment variables for clarity)::

    IMAGE=/home/jovyan/work/example_mri_data/T1.nii.gz
    OUT=/home/jovyan/work/mindboggle123_output
    ID=arno

    mindboggle123 $IMAGE --id $ID --out $OUT


Authors:
    - Arno Klein, 2017  (arno@mindboggle.info)  http://binarybottle.com
    - Satrajit S. Ghosh, 2017  (satra@mit.edu)  http://www.mit.edu/~satra/

Copyright 2017,  Mindboggle team (http://mindboggle.info), Apache v2.0 License

"""

import os
import argparse

from nipype import config, logging
from nipype.pipeline.engine import Workflow, Node
from nipype.interfaces.utility import Function as Fn
from nipype.interfaces.freesurfer import ReconAll
from nipype.interfaces.ants.segmentation import antsCorticalThickness

# ----------------------------------------------------------------------------
# Command-line arguments
# ----------------------------------------------------------------------------
parser = argparse.ArgumentParser(description="""
                    mindboggle123 runs a complete brain MR image morphology
                    pipeline: (1) FreeSurfer's recon-all,
                    (2) ANTs's antsCorticalThickness.sh, and
                    (3) Mindboggle (http://mindboggle.info).
                    Example: mindboggle123 IMAGE --id ID --out OUT""",
                                 formatter_class = lambda prog:
                                 argparse.HelpFormatter(prog,
                                                        max_help_position=40))

add_args = parser.add_argument_group('additional arguments')
adv_args = parser.add_argument_group('advanced settings')

# "positional arguments":
parser.add_argument("IMAGE", help=("T1-weighted MR human brain image"))

# "additional arguments":
add_args.add_argument("--id", help='ID for the brain image', metavar='STR')
add_args.add_argument("--out", help='output folder for all commands',
                      default='/home/jovyan/work/mindboggle123_output',
                      metavar='STR')
# "advanced arguments":
adv_args.add_argument("--working",
                      help="working folder (if not in the output folder)",
                      default=os.path.join('/home/jovyan/work/mindboggle123_output',
                                           'working'),
                      metavar='STR')
adv_args.add_argument("--plugin", dest="plugin",
                      default='Linear',
                      help="nipype plugin (see nipype documentation)")
adv_args.add_argument("--plugin_args", dest="plugin_args",
                      help="plugin arguments (see nipype documentation)")
adv_args.add_argument("--fs_openmp", dest="openmp",
                      default=1, type=int,
                      help="Number of freesurfer openmp threads")
adv_args.add_argument("--ants_num_threads", dest="num_threads",
                      default=1, type=int,
                      help="Number of threads to use with ANTs")
args = parser.parse_args()

# ----------------------------------------------------------------------------
# Input arguments
# ----------------------------------------------------------------------------
IMAGE = args.IMAGE
ID = args.id
OUT = args.out
WORK = args.working

# ----------------------------------------------------------------------------
# Output directories
# ----------------------------------------------------------------------------
if not os.path.isdir(OUT):
    print("Create missing output directory {0}".format(OUT))
    os.makedirs(OUT)
if not os.path.isdir(WORK):
    print("Create missing working directory {0}".format(WORK))
    os.makedirs(WORK)
freesurfer_output = os.path.join(OUT, 'freesurfer_subjects')
if not os.path.isdir(freesurfer_output):
    os.makedirs(freesurfer_output)
ants_output = os.path.join(OUT, 'ants_subjects')
if not os.path.isdir(ants_output):
    os.makedirs(ants_output)
mindboggle_output = os.path.join(OUT, 'mindboggled')
if not os.path.isdir(mindboggle_output):
    os.makedirs(mindboggle_output)

# ----------------------------------------------------------------------------
# Initialize workflow inputs and outputs
# ----------------------------------------------------------------------------
mbFlow = Workflow(name='Mindboggle123')
mbFlow.base_dir = WORK

# ----------------------------------------------------------------------------
# Use recon-all to generate surfaces and parcellations of structural data:
#     recon-all -all -i <structural.nii> -subjid <foo> -sd <.>
# ----------------------------------------------------------------------------
reconall = Node(ReconAll(), name='recon-all')
reconall.inputs.subject_id = ID
reconall.inputs.directive = 'all'
reconall.inputs.subjects_dir = freesurfer_output
reconall.inputs.T1_files = IMAGE
if args.openmp:
    reconall.inputs.openmp = args.openmp

# ----------------------------------------------------------------------------
# Use antsCorticalThickness.sh to generate segmentations of structural data:
#     antsCorticalThickness.sh -d 3 -a $IMAGE \
#     -e $TEMPLATE/T_template0.nii.gz \
#     -t $TEMPLATE/T_template0_BrainCerebellum.nii.gz \
#     -m $TEMPLATE/T_template0_BrainCerebellumProbabilityMask.nii.gz \
#     -f $TEMPLATE/T_template0_BrainCerebellumExtractionMask.nii.gz \
#     -p $TEMPLATE/Priors2/priors%d.nii.gz \
#     -o $PREFIX
# ----------------------------------------------------------------------------
TDIR = '/opt/data/OASIS-30_Atropos_template'
TEMPLATE = os.path.join(TDIR, 'T_template0.nii.gz')
REG = os.path.join(TDIR, 'T_template0_BrainCerebellum.nii.gz')
PROB = os.path.join(TDIR, 'T_template0_BrainCerebellumProbabilityMask.nii.gz')
EXT = os.path.join(TDIR, 'T_template0_BrainCerebellumExtractionMask.nii.gz')
PRIOR1 = os.path.join(TDIR, 'Priors2', 'priors1.nii.gz')
PRIOR2 = os.path.join(TDIR, 'Priors2', 'priors2.nii.gz')
PRIOR3 = os.path.join(TDIR, 'Priors2', 'priors3.nii.gz')
PRIOR4 = os.path.join(TDIR, 'Priors2', 'priors4.nii.gz')
PRIOR5 = os.path.join(TDIR, 'Priors2', 'priors5.nii.gz')
PRIOR6 = os.path.join(TDIR, 'Priors2', 'priors6.nii.gz')
PREFIX = os.path.join(ants_output, ID, 'ants')

corticalthickness = Node(antsCorticalThickness(),
                         name='antsCorticalThickness')
corticalthickness.inputs.dimension = 3
corticalthickness.inputs.anatomical_image = IMAGE
corticalthickness.inputs.brain_template = TEMPLATE
corticalthickness.inputs.t1_registration_template = REG
corticalthickness.inputs.brain_probability_mask = PROB
corticalthickness.inputs.extraction_registration_mask = EXT
corticalthickness.inputs.segmentation_priors = [PRIOR1, PRIOR2, PRIOR3,
                                                PRIOR4, PRIOR5, PRIOR6]
corticalthickness.inputs.out_prefix = PREFIX

if args.num_threads:
    corticalthickness.inputs.num_threads = args.num_threads

# ----------------------------------------------------------------------------
# Create function to call mindboggle
# ----------------------------------------------------------------------------
def mindboggle(subjectid, fsdir, antsdir, antsseg, out, args, verbose=True):
    """
    Run the mindboggle morphology pipeline (see http://mindboggle.info).

    Parameters
    ----------
    subjectid : string
        brain image ID
    fsdir : string
        path to FreeSurfer output subject directories
    antsdir : string
        path to antsCorticalThickness.sh output directories
    antsseg : string
        name of antsCorticalThickness.sh output segmentation file
    out : string
        path to mindboggle output directory
    args : string
        extra arguments
    verbose : boolean
        print to stdout?

    """
    import os

    from nipype.interfaces.base import CommandLine

    DATA = os.path.join(fsdir, subjectid)
    ants = os.path.join(antsdir, subjectid, antsseg)

    all_args = ' '.join([DATA, '--out', out, '--ants', ants, args])
    command = "{0} {1}".format('mindboggle', all_args)

    if verbose:
        print(command)

    cli = CommandLine(command='mindboggle')
    cli.inputs.args = all_args
    cli.cmdline
    cli.run()

    return command

# ----------------------------------------------------------------------------
# Run mindboggle on the recon-all and antsCorticalThickness.sh results:
#     mindboggle $FREESURFER_SUBJECT --out $MINDBOGGLED
#     --ants $ANTS_SUBJECT/antsBrainSegmentation.nii.gz --roygbiv --graph hier
# ----------------------------------------------------------------------------
Mindboggle = Node(name='mindboggle',
                  interface=Fn(function=mindboggle,
                               input_names=['subjectid',
                                            'fsdir',
                                            'antsdir',
                                            'antsseg',
                                            'out',
                                            'args',
                                            'verbose'],
                               output_names=['command']))
mbFlow.connect(reconall, 'subject_id', Mindboggle, 'subjectid')
mbFlow.connect(reconall, 'subjects_dir', Mindboggle, 'fsdir')
Mindboggle.inputs.antsdir = ants_output
mbFlow.connect(corticalthickness, 'BrainSegmentation',
               Mindboggle, 'antsseg')
Mindboggle.inputs.out = mindboggle_output
Mindboggle.inputs.args = '--roygbiv --graph hier'
Mindboggle.inputs.verbose = True

# ----------------------------------------------------------------------------
# Run workflow
# ----------------------------------------------------------------------------
if __name__ == '__main__':

    from time import time
    time0 = time()

    # ------------------------------------------------------------------------
    # Workflow configuration: provenance tracking, content hashing, etc.:
    # ------------------------------------------------------------------------
    # config.enable_provenance()
    mbFlow.config['execution']['hash_method'] = 'content'
    # mbFlow.config['execution']['use_relative_paths'] = True

    # ------------------------------------------------------------------------
    # Debug: http://nipy.org/nipype/users/config_file.html#debug-configuration
    # ------------------------------------------------------------------------
    debug = False
    if debug:
        config.set('logging', 'workflow_level', 'DEBUG')
        logging.update_logging(config)
        mbFlow.config['execution']['stop_on_first_rerun'] = True

    # ------------------------------------------------------------------------
    # Run with or without a plugin:
    # ------------------------------------------------------------------------
    if args.plugin:
        if args.plugin_args:
            mbFlow.run(plugin=args.plugin, plugin_args=eval(args.plugin_args))
        else:
            mbFlow.run(plugin=args.plugin)
    else:
        mbFlow.run()

    print('mindboggle123 done running recon-all, antsCorticalThicness.sh, '
          'and mindboggle on {0} after {1:0.2f} seconds.'.
          format(ID, time() - time0))
